// PIC18F47K42 Configuration Bit Settings

// 'C' source line config statements

// CONFIG1L
#pragma config FEXTOSC = OFF    // External Oscillator Selection (Oscillator not enabled)
#pragma config RSTOSC = HFINTOSC_64MHZ// Reset Oscillator Selection (HFINTOSC with HFFRQ = 64 MHz and CDIV = 1:1)

// CONFIG1H
#pragma config CLKOUTEN = OFF   // Clock out Enable bit (CLKOUT function is disabled)
#pragma config PR1WAY = ON      // PRLOCKED One-Way Set Enable bit (PRLOCK bit can be cleared and set only once)
#pragma config CSWEN = ON       // Clock Switch Enable bit (Writing to NOSC and NDIV is allowed)
#pragma config FCMEN = ON       // Fail-Safe Clock Monitor Enable bit (Fail-Safe Clock Monitor enabled)

// CONFIG2L
#pragma config MCLRE = EXTMCLR  // MCLR Enable bit (If LVP = 0, MCLR pin is MCLR; If LVP = 1, RE3 pin function is MCLR )
#pragma config PWRTS = PWRT_OFF // Power-up timer selection bits (PWRT is disabled)
#pragma config MVECEN = OFF     // Multi-vector enable bit (Interrupt contoller does not use vector table to prioritze interrupts)
#pragma config IVT1WAY = ON     // IVTLOCK bit One-way set enable bit (IVTLOCK bit can be cleared and set only once)
#pragma config LPBOREN = OFF    // Low Power BOR Enable bit (ULPBOR disabled)
#pragma config BOREN = OFF      // Brown-out Reset Enable bits (Brown-out Reset disabled)

// CONFIG2H
#pragma config BORV = VBOR_2P45 // Brown-out Reset Voltage Selection bits (Brown-out Reset Voltage (VBOR) set to 2.45V)
#pragma config ZCD = OFF        // ZCD Disable bit (ZCD disabled. ZCD can be enabled by setting the ZCDSEN bit of ZCDCON)
#pragma config PPS1WAY = ON     // PPSLOCK bit One-Way Set Enable bit (PPSLOCK bit can be cleared and set only once; PPS registers remain locked after one clear/set cycle)
#pragma config STVREN = ON      // Stack Full/Underflow Reset Enable bit (Stack full/underflow will cause Reset)
#pragma config DEBUG = OFF      // Debugger Enable bit (Background debugger disabled)
#pragma config XINST = OFF      // Extended Instruction Set Enable bit (Extended Instruction Set and Indexed Addressing Mode disabled)

// CONFIG3L
#pragma config WDTCPS = WDTCPS_31// WDT Period selection bits (Divider ratio 1:65536; software control of WDTPS)
#pragma config WDTE = OFF       // WDT operating mode (WDT Disabled; SWDTEN is ignored)

// CONFIG3H
#pragma config WDTCWS = WDTCWS_7// WDT Window Select bits (window always open (100%); software control; keyed access not required)
#pragma config WDTCCS = SC      // WDT input clock selector (Software Control)

// CONFIG4L
#pragma config BBSIZE = BBSIZE_512// Boot Block Size selection bits (Boot Block size is 512 words)
#pragma config BBEN = OFF       // Boot Block enable bit (Boot block disabled)
#pragma config SAFEN = OFF      // Storage Area Flash enable bit (SAF disabled)
#pragma config WRTAPP = OFF     // Application Block write protection bit (Application Block not write protected)

// CONFIG4H
#pragma config WRTB = OFF       // Boot Block Write Protection bit (Boot Block not write-protected)
#pragma config WRTC = OFF       // Configuration Register Write Protection bit (Configuration registers not write-protected)
#pragma config WRTD = OFF       // Data EEPROM Write Protection bit (Data EEPROM not write-protected)
#pragma config WRTSAF = OFF     // SAF Write protection bit (SAF not Write Protected)
#pragma config LVP = OFF        // Low Voltage Programming Enable bit (HV on MCLR/VPP must be used for programming)

// CONFIG5L
#pragma config CP = OFF         // PFM and Data EEPROM Code Protection bit (PFM and Data EEPROM code protection disabled)

// CONFIG5H

// #pragma config statements should precede project file includes.
// Use project enums instead of #define for ON and OFF.

#include <xc.h>

#define RS_PIN LATA3
#define EN_PIN LATB1
#define idata LATB
#define LCD_Port TRISB

void LCD_Init();
void UART_Init();  
void LCD_SEND_COMMAND(unsigned char cmd);
void LCD_SEND_DATA(unsigned char data);
void msdelay(unsigned int val);

void __interrupt()ISR(void){

    if(U1RXB==8)
    {  
        LCD_SEND_COMMAND(0x10);
        LCD_SEND_DATA(' ');
        LCD_SEND_COMMAND(0x10);
     
    }

    else if(U1RXB==13)
        LCD_SEND_COMMAND(0xC0);
    
    else if(U1RXB==33){
        LCD_SEND_COMMAND(0x80);
        LCD_SEND_COMMAND(0x01);
    }
    else
        LCD_SEND_DATA(U1RXB);

}

void main(void) {
             
    LCD_Init();
    UART_Init();
    GIE=1;
    U1RXIE=1;
    while(1);
}

void UART_Init(){

    U1RXPPS=0B00010111;
    TRISC7=1;
    ANSELC7=0;
    U1CON0=0B10010000;
    U1CON1=0B10000000;
    U1BRG=1666;
}

void LCD_Init(){

    TRISA3=0;
    TRISB=0;
    LATB=0;
    msdelay(50);
    LCD_SEND_COMMAND(0x02);
    LCD_SEND_COMMAND(0x28);
    LCD_SEND_COMMAND(0x01);
    LCD_SEND_COMMAND(0x0E);
    LCD_SEND_COMMAND(0x06);

}

void LCD_SEND_COMMAND(unsigned char cmd){

    RS_PIN=0;
    idata = (idata & 0B11000011) | (( cmd & 0xF0)>>2);
    EN_PIN = 1;
    msdelay(5);
    EN_PIN=0;
     msdelay(5);
    idata = (idata & 0B11000011) | (( cmd & 0x0F)<<2);
    EN_PIN = 1;
    msdelay(5);
EN_PIN=0;
     msdelay(5);

}

void LCD_SEND_DATA(unsigned char data){

    idata = (idata & 0B11000011) | (( data & 0xF0)>>2);
    RS_PIN=1;
    EN_PIN = 1;
    msdelay(5);
    EN_PIN=0;
     msdelay(5);
    idata = (idata & 0B11000011) | (( data & 0x0F)<<2);
    EN_PIN = 1;
    msdelay(5);
    EN_PIN=0;
     msdelay(5);

}

void msdelay(unsigned int val)
{

    unsigned int i,j;
    for(i=0;i<val;i++)
        for(j=0;j<1650;j++);
}
