    // Boot Block Table Read Protection bit (Boot Block (000000-0007FFh) not protected from table reads executed in other blocks)

// PIC18F46K20 Configuration Bit Settings

// CONFIG1H
#pragma config FOSC = HS        // Oscillator Selection bits (HS oscillator)
#pragma config FCMEN = OFF      // Fail-Safe Clock Monitor Enable bit (Fail-Safe Clock Monitor disabled)
#pragma config IESO = OFF       // Internal/External Oscillator Switchover bit (Oscillator Switchover mode disabled)

// CONFIG2L
#pragma config PWRTEN = ON      // Power-up Timer Enable bit (PWRT enabled)
#pragma config BOREN = OFF      // Brown-out Reset Enable bits (Brown-out Reset disabled in hardware and software)
#pragma config BORV = 18        // Brown Out Reset Voltage bits (VBOR set to 1.8 V nominal)

// CONFIG2H
#pragma config WDTEN = OFF      // Watchdog Timer Enable bit (WDT is controlled by SWDTEN bit of the WDTCON register)
#pragma config WDTPS = 32768    // Watchdog Timer Postscale Select bits (1:32768)

// CONFIG3H
#pragma config CCP2MX = PORTC   // CCP2 MUX bit (CCP2 input/output is multiplexed with RC1)
#pragma config PBADEN = ON      // PORTB A/D Enable bit (PORTB<4:0> pins are configured as analog input channels on Reset)
#pragma config LPT1OSC = OFF    // Low-Power Timer1 Oscillator Enable bit (Timer1 configured for higher power operation)
#pragma config HFOFST = ON      // HFINTOSC Fast Start-up (HFINTOSC starts clocking the CPU without waiting for the oscillator to stablize.)
#pragma config MCLRE = OFF      // MCLR Pin Enable bit (RE3 input pin enabled; MCLR disabled)

// CONFIG4L
#pragma config STVREN = OFF     // Stack Full/Underflow Reset Enable bit (Stack full/underflow will not cause Reset)
#pragma config LVP = OFF         // Single-Supply ICSP Enable bit (Single-Supply ICSP enabled)
#pragma config XINST = OFF      // Extended Instruction Set Enable bit (Instruction set extension and Indexed Addressing mode disabled (Legacy mode))

// CONFIG5L
#pragma config CP0 = OFF        // Code Protection Block 0 (Block 0 (000800-003FFFh) not code-protected)
#pragma config CP1 = OFF        // Code Protection Block 1 (Block 1 (004000-007FFFh) not code-protected)
#pragma config CP2 = OFF        // Code Protection Block 2 (Block 2 (008000-00BFFFh) not code-protected)
#pragma config CP3 = OFF        // Code Protection Block 3 (Block 3 (00C000-00FFFFh) not code-protected)

// CONFIG5H
#pragma config CPB = OFF        // Boot Block Code Protection bit (Boot block (000000-0007FFh) not code-protected)
#pragma config CPD = OFF        // Data EEPROM Code Protection bit (Data EEPROM not code-protected)

// CONFIG6L
#pragma config WRT0 = OFF       // Write Protection Block 0 (Block 0 (000800-003FFFh) not write-protected)
#pragma config WRT1 = OFF       // Write Protection Block 1 (Block 1 (004000-007FFFh) not write-protected)
#pragma config WRT2 = OFF       // Write Protection Block 2 (Block 2 (008000-00BFFFh) not write-protected)
#pragma config WRT3 = OFF       // Write Protection Block 3 (Block 3 (00C000h-00FFFFh) not write-protected)

// CONFIG6H
#pragma config WRTC = OFF       // Configuration Register Write Protection bit (Configuration registers (300000-3000FFh) not write-protected)
#pragma config WRTB = OFF       // Boot Block Write Protection bit (Boot Block (000000-0007FFh) not write-protected)
#pragma config WRTD = OFF       // Data EEPROM Write Protection bit (Data EEPROM not write-protected)

// CONFIG7L
#pragma config EBTR0 = OFF      // Table Read Protection Block 0 (Block 0 (000800-003FFFh) not protected from table reads executed in other blocks)
#pragma config EBTR1 = OFF      // Table Read Protection Block 1 (Block 1 (004000-007FFFh) not protected from table reads executed in other blocks)
#pragma config EBTR2 = OFF      // Table Read Protection Block 2 (Block 2 (008000-00BFFFh) not protected from table reads executed in other blocks)
#pragma config EBTR3 = OFF      // Table Read Protection Block 3 (Block 3 (00C000-00FFFFh) not protected from table reads executed in other blocks)

// CONFIG7H
#pragma config EBTRB = OFF      // Boot Block Table Read Protection bit (Boot Block (000000-0007FFh) not protected from table reads executed in other blocks)
#include <xc.h> // Include the XC header file for PIC microcontroller support

#define ldata PORTB // Define ldata as PORTB for data output to the LCD
#define rs LATE2    // Define rs as LATE2 for the register select pin of the LCD
#define rw LATE2    // Define rw as LATE2 for the read/write pin of the LCD (note: this should typically be a different pin)
#define en LATE0    // Define en as LATE0 for the enable pin of the LCD

// Define a string to be displayed on the LCD
unsigned char data[] = "ENGINEER HAMZA AHMAD GIKI"; // String to be sent to the LCD

int x = 0; // Initialize a variable x (not used in this code)

void delay(int ms); // Function prototype for delay function
void lcdcmd(unsigned char value); // Function prototype for sending command to LCD
void lcddata(unsigned char value); // Function prototype for sending data to LCD

void main(void) {
    TRISB = 0; // Set PORTB as output for data to the LCD
    TRISE = 0; // Set PORTE as output for control signals to the LCD
    ADCON1 = 0B00001111; // Configure all pins as digital I/O (disable analog inputs)
    
    en = 0; // Initialize the enable pin to low
    rw = 0; // Initialize the read/write pin to low (write mode)
    
    delay(50); // Delay for 50 ms to allow the LCD to power up

    // Initialize the LCD in 8-bit mode
    lcdcmd(0x38); // Function set: 8-bit mode, 2 lines, 5x8 dots
    delay(50); // Delay for command execution

    lcdcmd(0x0E); // Display on, cursor on, blink off
    delay(50); // Delay for command execution

    lcdcmd(0x01); // Clear display
    delay(50); // Delay for command execution

    lcdcmd(0x06); // Entry mode set: increment cursor, no shift
    delay(50); // Delay for command execution

    lcdcmd(0x80); // Set cursor to the beginning of the first line
    delay(50); // Delay for command execution

    // Loop to send the first 15 characters of the string to the LCD
    for(int i = 0; i < 15; i++) {
        lcddata(data[i]); // Send each character to the LCD
        delay(200); // Delay between characters
    }

    lcdcmd(0xC0); // Set cursor to the beginning of the second line
    delay(50); // Delay for command execution

    // Loop to send the next 11 characters of the string to the LCD
    for(int i = 15; i < 26; i++) {
        lcddata(data[i]); // Send each character to the LCD
        delay(200); // Delay between characters
    }

    // Infinite loop to keep the program running
    while(1) {
        // The main loop runs indefinitely, allowing the LCD to display the message
    }
}

// Function to send a command to the LCD
void lcdcmd(unsigned char value) {
    ldata = value; // Output the command value to the data port
    rs = 0; // Set rs to 0 for command mode
    en = 1; // Set enable pin high to latch the command
    delay(20); // Delay for command execution
    en = 0; // Set enable pin low to complete the command
}

// Function to send data to the LCD
void lcddata(unsigned char value) {
    ldata = value; // Output the data value to the data port
    rs = 1; // Set rs to 1 for data mode
    en = 1; // Set enable pin high to latch the data
    delay(20); // Delay for data execution
    en = 0; // Set enable pin low to complete the data transfer
}

// Function to create a delay in milliseconds
void delay(int ms) {
    // Outer loop for the number of milliseconds
    for(int i = 0; i < ms; i++)
        // Inner loop for creating a delay (adjust the inner loop count as needed)
        for(int j = 0; j < 100; j++);
}
