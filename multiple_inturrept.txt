// PIC18F46K20 Configuration Bit Settings

// 'C' source line config statements

// CONFIG1H
#pragma config FOSC = HS        // Oscillator Selection bits (HS oscillator)
#pragma config FCMEN = OFF      // Fail-Safe Clock Monitor Enable bit (Fail-Safe Clock Monitor disabled)
#pragma config IESO = OFF       // Internal/External Oscillator Switchover bit (Oscillator Switchover mode disabled)

// CONFIG2L
#pragma config PWRTEN = ON      // Power-up Timer Enable bit (PWRT enabled)
#pragma config BOREN = OFF      // Brown-out Reset Enable bits (Brown-out Reset disabled in hardware and software)
#pragma config BORV = 18        // Brown Out Reset Voltage bits (VBOR set to 1.8 V nominal)

// CONFIG2H
#pragma config WDTEN = OFF      // Watchdog Timer Enable bit (WDT is controlled by SWDTEN bit of the WDTCON register)
#pragma config WDTPS = 32768    // Watchdog Timer Postscale Select bits (1:32768)

// CONFIG3H
#pragma config CCP2MX = PORTC   // CCP2 MUX bit (CCP2 input/output is multiplexed with RC1)
#pragma config PBADEN = OFF     // PORTB A/D Enable bit (PORTB<4:0> pins are configured as analog input channels on Reset)
#pragma config LPT1OSC = OFF    // Low-Power Timer1 Oscillator Enable bit (Timer1 configured for higher power operation)
#pragma config HFOFST = ON      // HFINTOSC Fast Start-up (HFINTOSC starts clocking the CPU without waiting for the oscillator to stabilize.)
#pragma config MCLRE = OFF      // MCLR Pin Enable bit (RE3 input pin enabled; MCLR disabled)

// CONFIG4L
#pragma config STVREN = OFF     // Stack Full/Underflow Reset Enable bit (Stack full/underflow will not cause Reset)
#pragma config LVP = ON         // Single-Supply ICSP Enable bit (Single-Supply ICSP enabled)
#pragma config XINST = OFF      // Extended Instruction Set Enable bit (Instruction set extension and Indexed Addressing mode disabled (Legacy mode))

// CONFIG5L
#pragma config CP0 = OFF        // Code Protection Block 0 (Block 0 (000800-003FFFh) not code-protected)
#pragma config CP1 = OFF        // Code Protection Block 1 (Block 1 (004000-007FFFh) not code-protected)
#pragma config CP2 = OFF        // Code Protection Block 2 (Block 2 (008000-00BFFFh) not code-protected)
#pragma config CP3 = OFF        // Code Protection Block 3 (Block 3 (00C000-00FFFFh) not code-protected)

// CONFIG5H
#pragma config CPB = OFF        // Boot Block Code Protection bit (Boot block (000000-0007FFh) not code-protected)
#pragma config CPD = OFF        // Data EEPROM Code Protection bit (Data EEPROM not code-protected)

// CONFIG6L
#pragma config WRT0 = OFF       // Write Protection Block 0 (Block 0 (000800-003FFFh) not write-protected)
#pragma config WRT1 = OFF       // Write Protection Block 1 (Block 1 (004000-007FFFh) not write-protected)
#pragma config WRT2 = OFF       // Write Protection Block 2 (Block 2 (008000-00BFFFh) not write-protected)
#pragma config WRT3 = OFF       // Write Protection Block 3 (Block 3 (00C000h-00FFFFh) not write-protected)

// CONFIG6H
#pragma config WRTC = OFF       // Configuration Register Write Protection bit (Configuration registers (300000-3000FFh) not write-protected)
#pragma config WRTB = OFF       // Boot Block Write Protection bit (Boot Block (000000-0007FFh) not write-protected)
#pragma config WRTD = OFF       // Data EEPROM Write Protection bit (Data EEPROM not write-protected)

// CONFIG7L
#pragma config EBTR0 = OFF      // Table Read Protection Block 0 (Block 0 (000800-003FFFh) not protected from table reads executed in other blocks)
#pragma config EBTR1 = OFF      // Table Read Protection Block 1 (Block 1 (004000-007FFFh) not protected from table reads executed in other blocks)
#pragma config EBTR2 = OFF      // Table Read Protection Block 2 (Block 2 (008000-00BFFFh) not protected from table reads executed in other blocks)
#pragma config EBTR3 = OFF      // Table Read Protection Block 3 (Block 3 (00C000-00FFFFh) not protected from table reads executed in other blocks)

// CONFIG7H
#pragma config EBTRB = OFF      // Boot Block Table Read Protection bit (Boot Block (000000-0007FFh) not protected from table reads executed in other blocks)

// #pragma config statements should precede project file includes.
// Use project enums instead of #define for ON and OFF.

#include <xc.h>  // Include the XC8 library for PIC microcontrollers

#define _XTAL_FREQ 8000000  // Define system clock frequency (8 MHz)

// Global variables for timing control
int x = 20;  // Controls OFF time
int y = 40;  // Controls ON time

// Function prototype for delay
void delay(int ms);

// Interrupt Service Routine (ISR) - Handles external interrupts
void __interrupt() ISR(void)
{
    // Interrupt on INT0 (RB0) - Increase duty cycle
    if (INT0IF == 1) {
        x++;  // Increase OFF time
        y++;  // Increase ON time
        INT0IF = 0;  // Clear the INT0 interrupt flag
    }

    // Interrupt on INT1 (RB1) - Decrease duty cycle
    if (INT1IF == 1) {
        x--;  // Decrease OFF time
        y--;  // Decrease ON time
        INT1IF = 0;  // Clear the INT1 interrupt flag
    }

    // Interrupt on INT2 (RB2) - Reset timing values
    if (INT2IF == 1) {
       x = 20;  // Reset OFF time to default
       y = 20;  // Reset ON time to default
       INT2IF = 0;  // Clear the INT2 interrupt flag
    }
}

void main(void)
{
    // Configure INT0, INT1, and INT2 as input pins
    TRISB0 = 1;  // Set RB0 as input (INT0 - Increase)
    TRISB1 = 1;  // Set RB1 as input (INT1 - Decrease)
    TRISB2 = 1;  // Set RB2 as input (INT2 - Reset)
    
    // Configure external interrupts to trigger on rising edge
    INTEDG0 = 1;  // Rising edge trigger for INT0
    INTEDG1 = 1;  // Rising edge trigger for INT1
    INTEDG2 = 1;  // Rising edge trigger for INT2

    // Enable interrupts
    GIE = 1;     // Enable global interrupts
    INT0IE = 1;  // Enable INT0 external interrupt
    INT1IE = 1;  // Enable INT1 external interrupt
    INT2IE = 1;  // Enable INT2 external interrupt
    
    // Configure RD1 (PORTD pin 1) as output
    TRISD1 = 0;   // Set RD1 as output
    LATD1 = 0;    // Initialize RD1 to LOW
    
    // Main loop to generate a PWM-like signal
    while (1){
        LATD1 = 0;  // Turn OFF the output
        delay(y);   // Wait for ON time
        
        LATD1 = 1;  // Turn ON the output
        delay(x);   // Wait for OFF time
    }   
}

// Simple delay function (software-based)
void delay(int ms)
{
    for(int i = 0; i < ms; i++)
        for(int j = 0; j < 80; j++);  // Approximate time delay loop
}
