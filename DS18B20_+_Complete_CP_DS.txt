// PIC18F458 Configuration Bit Settings
// 'C' source line config statements
// CONFIG1H
#pragma config OSC = HS         // Oscillator Selection bits (HS oscillator)
#pragma config OSCS = OFF       // Oscillator System Clock Switch Enable bit (Oscillator system clock switch option is disabled (main oscillator is source))
// CONFIG2L
#pragma config PWRT = OFF       // Power-up Timer Enable bit (PWRT disabled)
#pragma config BOR = OFF        // Brown-out Reset Enable bit (Brown-out Reset disabled)
#pragma config BORV = 25        // Brown-out Reset Voltage bits (VBOR set to 2.5V)
// CONFIG2H
#pragma config WDT = OFF        // Watchdog Timer Enable bit (WDT disabled (control is placed on the SWDTEN bit))
#pragma config WDTPS = 128      // Watchdog Timer Postscale Select bits (1:128)
// CONFIG4L
#pragma config STVR = OFF       // Stack Full/Underflow Reset Enable bit (Stack Full/Underflow will not cause Reset)
#pragma config LVP = OFF        // Low-Voltage ICSP Enable bit (Low-Voltage ICSP disabled)
// CONFIG5L
#pragma config CP0 = OFF        // Code Protection bit (Block 0 (000200-001FFFh) not code protected)
#pragma config CP1 = OFF        // Code Protection bit (Block 1 (002000-003FFFh) not code protected)
#pragma config CP2 = OFF        // Code Protection bit (Block 2 (004000-005FFFh) not code protected)
#pragma config CP3 = OFF        // Code Protection bit (Block 3 (006000-007FFFh) not code protected)
// CONFIG5H
#pragma config CPB = OFF        // Boot Block Code Protection bit (Boot Block (000000-0001FFh) not code protected)
#pragma config CPD = OFF        // Data EEPROM Code Protection bit (Data EEPROM not code protected)
// CONFIG6L
#pragma config WRT0 = OFF       // Write Protection bit (Block 0 (000200-001FFFh) not write protected)
#pragma config WRT1 = OFF       // Write Protection bit (Block 1 (002000-003FFFh) not write protected)
#pragma config WRT2 = OFF       // Write Protection bit (Block 2 (004000-005FFFh) not write protected)
#pragma config WRT3 = OFF       // Write Protection bit (Block 3 (006000-007FFFh) not write protected)
// CONFIG6H
#pragma config WRTC = OFF       // Configuration Register Write Protection bit (Configuration registers (300000-3000FFh) not write protected)
#pragma config WRTB = OFF       // Boot Block Write Protection bit (Boot Block (000000-0001FFh) not write protected)
#pragma config WRTD = OFF       // Data EEPROM Write Protection bit (Data EEPROM not write protected)
// CONFIG7L
#pragma config EBTR0 = OFF      // Table Read Protection bit (Block 0 (000200-001FFFh) not protected from Table Reads executed in other blocks)
#pragma config EBTR1 = OFF      // Table Read Protection bit (Block 1 (002000-003FFFh) not protected from Table Reads executed in other blocks)
#pragma config EBTR2 = OFF      // Table Read Protection bit (Block 2 (004000-005FFFh) not protected from Table Reads executed in other blocks)
#pragma config EBTR3 = OFF      // Table Read Protection bit (Block 3 (006000-007FFFh) not protected from Table Reads executed in other blocks)
// CONFIG7H
#pragma config EBTRB = OFF      // Boot Block Table Read Protection bit (Boot Block (000000-0001FFh) not protected from Table Reads executed in other blocks)

////////////////////////////////////////////////////////////////////////////////

#include <xc.h>
#include <math.h>
#include <stdio.h>
#include <stdint.h>

#define _XTAL_FREQ 4000000

// LCD Definitions
#define ldata PORTB
#define rs    LATE2
#define rw    LATE1
#define en    LATE0

// DS18B20 pin definitions
#define DQ_DIR  TRISAbits.TRISA4
#define DQ_PIN  PORTAbits.RA4
#define DQ_LAT  LATAbits.LATA4

unsigned int currentSetpointIndex = 0;
float currentTemp = 25.0;
int Kp = 5;

// Setpoint array (48 values, 5-second intervals)
const float setpoints[48] = {
    25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95, 100,
    105, 110, 115, 120, 125, 130, 135, 140, 145, 150,  // Pre-Heat
    150, 155, 160, 165, 170, 175, 180, 180, 180, 180, 180, 180,  // Soak
    185, 190, 195, 200, 205, 210, 215, 220,  // Reflow
    215, 210  // Cooling
};

// Function prototypes
void delay(int ms);
void lcdcmd(unsigned char value);
void lcddata(unsigned char value);
void lcd_init(void);
void lcd_print_uint8(unsigned char v);
void lcd_print_str(const char *str);
void Send_Serial_Data(void);
void Initialize_UART(void);
void UART_SendChar(char c);
void UART_SendString(const char* str);
uint8_t OneWire_Reset(void);
void OneWire_WriteBit(uint8_t bit);
uint8_t OneWire_ReadBit(void);
void OneWire_WriteByte(uint8_t data);
uint8_t OneWire_ReadByte(void);
float DS18B20_ReadTemp(void);

// Interrupt Service Routine
void __interrupt() ISR(void) {
    // Timer0 interrupt (5-second interval)
    if (TMR0IF == 1) {
        TMR0 = 26437; // Reload Timer0 to maintain delay consistency
        TMR0IF = 0;  // Clear Timer0 interrupt flag
        currentSetpointIndex = currentSetpointIndex + 1;
        if (currentSetpointIndex >= 48) {
            TMR0IE = 0;     // Disable timer
            CCPR1L = 0;     // Heater off
            ECCPR1L = 0;    // Fan off
        }
    }

    // ADC conversion complete (used for Kp adjustment)
    if (ADIF == 1) {
        // Read 10-bit ADC (assuming left-justified in your config)
        // Scale ADC reading (0-1023) to Kp range (1-20 for example)
        Kp = 1 + (ADRESH >> 3); // Scale 0-255 to 1-32
        ADIF = 0; // Clear ADC interrupt flag
        GODONE = 1; // Start new conversion
    }
}

// OneWire Functions
uint8_t OneWire_Reset(void) {
    DQ_DIR = 0; DQ_LAT = 0; __delay_us(480);  // Pull low
    DQ_DIR = 1; __delay_us(70);              // Release and wait
    uint8_t presence = !DQ_PIN;              // 0 = error, 1 = OK
    __delay_us(410);
    return presence;
}

void OneWire_WriteBit(uint8_t bit) {
    DQ_DIR = 0; DQ_LAT = 0;
    if (bit) {
        __delay_us(6);    // Short delay for bit 1
    } else {
        __delay_us(60);   // Long delay for bit 0
    }
    DQ_DIR = 1;   // Release the line
    if (bit) {
        __delay_us(64);   // Extra delay for bit 1
    } else {
        __delay_us(10);   // Extra delay for bit 0
    }
}

uint8_t OneWire_ReadBit(void) {
    uint8_t bit;
    DQ_DIR = 0; DQ_LAT = 0; __delay_us(2);
    DQ_DIR = 1; __delay_us(10);
    bit = DQ_PIN;
    __delay_us(50);
    return bit;
}

void OneWire_WriteByte(uint8_t data) {
    for (uint8_t i = 0; i < 8; i++)
        OneWire_WriteBit(data & (1 << i));
}

uint8_t OneWire_ReadByte(void) {
    uint8_t data = 0;
    for (uint8_t i = 0; i < 8; i++)
        if (OneWire_ReadBit()) data |= (1 << i);
    return data;
}

// DS18B20 Temperature Read
float DS18B20_ReadTemp(void) {
    if (!OneWire_Reset()) return -1000.0; // Error

    OneWire_WriteByte(0xCC); // Skip ROM
    OneWire_WriteByte(0x44); // Convert T
    __delay_ms(750);         // Wait for conversion

    if (!OneWire_Reset()) return -1000.0;

    OneWire_WriteByte(0xCC); // Skip ROM
    OneWire_WriteByte(0xBE); // Read Scratchpad

    uint8_t tempLSB = OneWire_ReadByte();
    uint8_t tempMSB = OneWire_ReadByte();

    int16_t rawTemp = (tempMSB << 8) | tempLSB;
    return rawTemp * 0.0625; // Convert to Â°C
}

// UART Functions
void Initialize_UART(void) {
    // Configure the serial port settings
    SPEN = 1;   // Enable the serial port
    TXEN = 1;   // Enable the transmitter
    SYNC = 0;   // Set to asynchronous mode
    BRGH = 1;   // High baud rate select bit
    SPBRG = 25; // Set the baud rate generator value
}

void UART_SendChar(char c) {
    while (!TXSTAbits.TRMT);
    TXREG = c;
}

void UART_SendString(const char* str) {
    while (*str) UART_SendChar(*str++);
}

// LCD Functions
void lcd_init(void) {
    rw = 0;
    delay(50);
    lcdcmd(0x38);
    delay(5);
    lcdcmd(0x0C);
    delay(5);
    lcdcmd(0x06);
    delay(5);
    lcdcmd(0x01);
    delay(5);
    lcdcmd(0x80);
    delay(5);
}

void lcdcmd(unsigned char value) {
    ldata = value;
    rs = 0;
    en = 1;
    delay(2);
    en = 0;
    delay(2);
}

void lcddata(unsigned char value) {
    ldata = value;
    rs = 1;
    en = 1;
    delay(2);
    en = 0;
    delay(2);
}

void lcd_print_uint8(unsigned char v) {
    unsigned char hundreds = v / 100;
    unsigned char tens = (v % 100) / 10;
    unsigned char ones = v % 10;

    if (hundreds) {
        lcddata('0' + hundreds);
        lcddata('0' + tens);
        lcddata('0' + ones);
    } else if (tens) {
        lcddata('0' + tens);
        lcddata('0' + ones);
    } else {
        lcddata('0' + ones);
    }
}

void lcd_print_str(const char *str) {
    while (*str) {
        lcddata(*str++);
    }
}

void Send_Serial_Data(void) {
    char buffer[50];
    sprintf(buffer, "Set: %.1f, Temp: %.1f, Kp: %d\r\n", 
            setpoints[currentSetpointIndex], currentTemp, Kp);
    
    for(int i = 0; buffer[i] != '\0'; i++) {
        TXIF = 0;               // Clear transmit flag
        TXREG = buffer[i];      // Load character
        while(!TXIF);           // Wait for transmission
    }
}

void delay(int ms) {
    for (int i = 0; i < ms; i++)
        for (int j = 0; j < 1; j++);
}

// Main Program
void main(void) {
   
    // Initialize hardware
    TRISB = 0x00;  
    TRISE = 0x00;
    TRISD4 = 0;
    TRISC2 = 0;
    TRISA0 = 1;     // ADC input for Kp adjustment
    TRISA4 = 1;     // DS18B20 data pin
    AN0 = 1;        // Configure RA0 as analog input
    
    // ADC Configuration
    ADCON0 = 0B00000000;  // Channel 0 (AN0), ADC disabled initially
    ADCON1 = 0B00000000;  // Left justified, VDD-VSS references
    
    // PWM Configuration
    CCP1CON = 0B00001100;   // PWM mode
    ECCP1CON = 0B00001100;  // PWM mode for fan control
    T2CON = 0B00000001;     // Timer2 prescaler 1:4
    PR2 = 249;              // PWM period
    TMR2ON = 1;             // Timer2 on
    
    // Timer0 Configuration (5-second intervals)
    T0CON = 0B00000110;     // Timer0 with prescaler
    TMR0ON = 1;
    
     Initialize_UART();
    lcd_init();
   // GIE = 1;        // Global interrupt enable
    // Interrupt setup
    ADIE = 1;       // Enable ADC interrupt
    TMR0IE = 1;     // Enable Timer0 interrupt
    PEIE = 1;       // Peripheral interrupts enable
  
    // Initialize peripherals
    
    ADON = 1;       // Turn on ADC
    GODONE = 1;     // Start first conversion
    
    __delay_ms(1000);  // Initial delay
    
    while (1) {
        // Read temperature from DS18B20
        float temp = DS18B20_ReadTemp();
        if (temp > -100) {
            currentTemp = temp;
        } else {
            UART_SendString("Sensor Error\r\n");
        }
        
        // PWM control logic
        float error = setpoints[currentSetpointIndex] - currentTemp;
        int pwmDuty = Kp * fabs(error);
        if (pwmDuty > 255) {
            pwmDuty = 255;
        }
        
        // Control outputs based on error sign
        if (error > 0) {
            CCPR1L = pwmDuty;  // Heater
            ECCPR1L = 0;       // Fan off
        } else {
            ECCPR1L = pwmDuty;  // Fan
            CCPR1L = 0;         // Heater off
        }

        // Update LCD with new format
        lcdcmd(0x01);  // Clear display
        
        // Line 1: Setpoint (SP) and Temperature (T)
        lcdcmd(0x80);
        lcd_print_str("SP:");
        lcd_print_uint8((unsigned char)setpoints[currentSetpointIndex]);
        lcddata(0xDF);  // Degree symbol
        lcddata('C');
        lcddata(' ');
        lcd_print_str("T:");
        lcd_print_uint8((unsigned char)currentTemp);
        lcddata(0xDF);
        lcddata('C');
        
        // Line 2: Phase and Control Status
        const char *phase;
        if (currentSetpointIndex < 26) phase = "Pre-heat";
        else if (currentSetpointIndex < 38) phase = "Soak";
        else if (currentSetpointIndex < 46) phase = "Reflow";
        else phase = "Cooling";
        
        lcdcmd(0xC0);
        lcd_print_str(phase);
        lcddata(' ');
        lcddata((error > 0) ? 'H' : 'F');
        lcd_print_str(":ON Kp:");
        lcd_print_uint8(Kp);

        Send_Serial_Data();
        __delay_ms(100);
    }
}